import { Logout, Settings } from '@mui/icons-material';
import {
  Avatar,
  createTheme,
  Divider,
  IconButton,
  InputBase,
  ListItemIcon,
  Menu,
  MenuItem,
  Badge,
  Autocomplete,
  TextField,
  Typography,
  useTheme,
  Switch,
} from '@mui/material';
import ModeNightIcon from '@mui/icons-material/ModeNight';
import React, { useState, useEffect, useCallback } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import CottageIcon from '@mui/icons-material/Cottage';
import LiveTvIcon from '@mui/icons-material/LiveTv';
import MenuIcon from '@mui/icons-material/Menu';
import GroupIcon from '@mui/icons-material/Group';
import { MyButton, NavBox, Search, Icons } from './NavStyles';
import Logo from './Logo';
import NotificationsButton from './NotificationsButton';
import { useAuth } from '../tools/auth';
import { io } from 'socket.io-client';
import { myApi } from '../tools/apiHandler';
import { useQuery } from 'react-query';
import { useChatSocket } from '../layouts/MainLayout';
import { NotificationDTO, UserSearchDataDTO } from '../tools/api.autogenerated';
import { toast } from 'react-toastify';
import NotificationMenu from './notifications/NotificationMenu';

const notificationSocket = io('localhost:5000/notifications', {
  withCredentials: true,
  autoConnect: false,
});

export type Notification = NotificationDTO;
export type NotificationsButtonProps = {};

export const isNotificationReadOnSeen = (notif: NotificationDTO) => {
  const readOnSeen: NotificationDTO['type'][] = [
    'friend_request_accepted',
    'new_achievement',
  ];
  return readOnSeen.includes(notif.type);
};

const NavLoggedIn = (props: any) => {
  const { mode, setMode } = props;
  const { user } = useAuth();
  const [unreadMessages, setUnreadMessages] = useState(0);
  const chatSocket = useChatSocket().socket;
  const [searchOptions, setSearchOptions] = useState<UserSearchDataDTO[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const navigate = useNavigate();
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState<number>();
  const [showMenu, setShowMenu] = useState(false);
  const [toMarkReadOnClose, setToMarkReadOnClose] = useState<number[]>([]);

  const [anchorElRightMenu, setAnchorElRightMenu] =
    useState<null | HTMLElement>(null);
  const openProfile = Boolean(anchorElRightMenu);
  const handleClickRightMenu = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorElRightMenu(event.currentTarget);
  };
  const handleCloseRightMenu = (e: any) => {
    if (e.target.classList[0] !== 'PrivateSwitchBase-input')
      setAnchorElRightMenu(null);
  };
  const { signOut } = useAuth();

  const [anchorElLeftMenu, setAnchorElLeftMenu] = useState<null | HTMLElement>(
    null,
  );

  const { data } = useQuery(
    'notifications',
    () => myApi.notificationsControllerGetNotifications(),
    {
      refetchOnMount: false,
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
    },
  );

  useEffect(() => {
    if (!data) return;
    // @ts-ignore
    setNotifications(data?.data.notifications);
    
  }, [data]);

  const open = Boolean(anchorElLeftMenu);
  const handleClickLeftMenu = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorElLeftMenu(event.currentTarget);
  };
  const handleCloseLeftMenu = () => {
    setAnchorElLeftMenu(null);
  };

  const onNewNotification = useCallback(
    (notification: NotificationDTO & { content: any }) => {
      
      notification.content = JSON.parse(notification.content);
      setNotifications((curr) => [notification, ...curr]);
      if (isNotificationReadOnSeen(notification))
        setToMarkReadOnClose((curr) => [...curr, notification.id]);
      if (notification.type === 'game_invitation_received')
        toast(
          <div>
            <span className="notif-username">
              {notification.content.friend.username}
            </span>{' '}
            wants to play with you !
          </div>,
          { theme: 'light' },
        );
      if (notification.type === 'friend_request_received')
        toast(
          <div>
            <span className="notif-username">
              {notification.content.friend.username}
            </span>{' '}
            just sent you a friend request !
          </div>,
          { theme: 'light' },
        );
      if (notification.type === 'friend_request_accepted')
        toast(
          <div>
            <span className="notif-username">
              {notification.content.friend.username}
            </span>{' '}
            accepted your friend request !
          </div>,
          { theme: 'light' },
        );

      if (notification.type === 'new_achievement')
        toast(<div>You unlocked a new achievement !</div>, { theme: 'light' });
    },
    [],
  );

  useEffect(() => {
    notificationSocket.connect();
    notificationSocket.on('NEW_NOTIFICATION', onNewNotification);
    return () => {
      notificationSocket.disconnect();
      notificationSocket.off('NEW_NOTIFICATION');
    };
  }, []);

  // Helper function to update a single room inside the rooms array
  const updateNotif = (
    notifId: number,
    newVal:
      | Partial<NotificationDTO>
      | ((curr: NotificationDTO) => Partial<NotificationDTO>),
  ) => {
    setNotifications((currentArray) =>
      currentArray.map((notif) =>
        notif.id === notifId
          ? typeof newVal === 'function'
            ? { ...notif, ...newVal(notif) }
            : { ...notif, ...newVal }
          : notif,
      ),
    );
  };

  useEffect(() => {
    setUnreadCount(notifications.filter((notif) => !notif.isRead).length);
  }, [notifications]);

  useEffect(() => {
    if (showMenu) {
      const instantReadNotifications = notifications
        .filter((notif) => isNotificationReadOnSeen(notif))
        .map((notif) => notif.id);
      
      setToMarkReadOnClose((curr) => [...curr, ...instantReadNotifications]);
    } else {
      if (toMarkReadOnClose.length) {
        myApi.notificationsControllerMarkRead({ ids: toMarkReadOnClose });
        toMarkReadOnClose.forEach((notifId) =>
          updateNotif(notifId, { isRead: true }),
        );
      }
    }
  }, [showMenu]);

  const onSingleNotifRead = useCallback(async (notifId: number) => {
    myApi.notificationsControllerMarkRead({ ids: [notifId] });
    updateNotif(notifId, { isRead: true });
  }, []);

  const onReceiveMessage = useCallback(() => {
    if (chatSocket.listeners('receive_message').length === 1)
      setUnreadMessages((curr) => curr + 1);
  }, [chatSocket]);

  useEffect(() => {
    chatSocket.on('receive_message', onReceiveMessage);
    return () => {
      chatSocket.off('receive_message', onReceiveMessage);
    };
  }, [chatSocket]);

  const searchUsers = async (query: string) => {
    setSearchQuery(query);
    if (query.length) {
      const response = await myApi.usersControllerSearchUser({ query: query });
      setSearchOptions([...response.data.users]);
    } else {
      setSearchOptions([]);
    }
  };

  const theTheme = useTheme();
  const [checked, setChecked] = useState(theTheme.palette.mode === 'dark');

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (mode) {
      setMode(mode === 'light' ? 'dark' : 'light');
      setChecked(event.target.checked);
    }
  };

  const colorPaper = theTheme.palette.mode === 'light' ? '#F8EFE0' : '#476A76';
  return (
    <>
      <IconButton
        sx={{ display: { xs: 'block', md: 'none' }, mr: 1 }}
        aria-controls={open ? 'basic-menu' : undefined}
        aria-haspopup="true"
        aria-expanded={open ? 'true' : undefined}
        onClick={handleClickLeftMenu}
      >
        <Badge badgeContent={unreadCount} color={'error'}>
          <MenuIcon sx={{ color: 'primary.contrastText' }} />
        </Badge>
      </IconButton>
      <Logo sx={{ display: { xs: 'none', sm: 'block' } }} />
      <Icons flex={5} p={1} justifyContent="left">
        <NavLink to="/app" style={{ textDecoration: 'none' }}>
          <IconButton
            sx={{ display: { xs: 'none', md: 'block' }, mr: 1 }}
            aria-label="Home"
          >
            <CottageIcon
              sx={{ color: 'primary.contrastText' }}
              fontSize="inherit"
            />
          </IconButton>
        </NavLink>
        <NavLink
          to="/app/chat"
          style={{ textDecoration: 'none' }}
          onClick={() => setUnreadMessages(0)}
        >
          <Badge badgeContent={unreadMessages} color="error">
            <MyButton variant="text">CHAT</MyButton>
          </Badge>
        </NavLink>
        <NavLink to="/app/game" style={{ textDecoration: 'none' }}>
          <MyButton variant="text">GAME</MyButton>
        </NavLink>
      </Icons>
      <Logo sx={{ display: { xs: 'block', sm: 'none' } }} />
      <NavBox flex={3} p={1} justifyContent="left" gap={4}>
        <Autocomplete
          onChange={(e, val) => {
            if (val) navigate(`/app/users/${val?.username}`);
          }}
          // className="nav-search-box"
          sx={{ width: '100%' }}
          size="small"
          options={searchOptions}
          onInputChange={(e, val) => {
            searchUsers(val);
          }}
          filterOptions={(x) => x}
          noOptionsText="Username or login..."
          getOptionLabel={(opt) => opt.username}
          isOptionEqualToValue={(opt, val) => opt.id === val.id}
          renderOption={(props, opt, state) => (
            <li
              {...props}
              style={{
                display: 'flex',
                justifyContent: 'space-between',
              }}
              // onClick={() => navigate(`/app/users/${opt.username}`)}
            >
              <Avatar
                src={opt.imageUrl}
                style={{ justifySelf: 'flex-start' }}
              />
              <Typography variant="h6">{opt.username}</Typography>
              <Typography variant="subtitle2">{opt.login}</Typography>
            </li>
          )}
          renderInput={(params) => (
            <TextField
              style={{ marginTop: 20, marginBottom: 20 }}
              {...params}
              placeholder="Search..."
              InputProps={{
                ...params.InputProps,
                endAdornment: null,
                style: { background: colorPaper },
              }}
            />
          )}
        />
      </NavBox>
      <NavBox>
        <Icons ml={5}>
          <NavLink
            to="/app/live/"
            style={{ textDecoration: 'none', color: 'inherit' }}
          >
            <IconButton
              sx={{ display: { xs: 'none', sm: 'block' }, mr: 1 }}
              aria-label="Live"
            >
              <LiveTvIcon sx={{ color: 'primary.contrastText' }} />
            </IconButton>
          </NavLink>
          <NotificationsButton
            updateNotif={updateNotif}
            notifications={notifications}
            onSingleNotifRead={onSingleNotifRead}
            unreadCount={unreadCount || 0}
          />
        </Icons>
      </NavBox>

      <NavBox flex={2} p={1} justifyContent="center">
        <Avatar
          sx={{ width: 50, height: 50 }}
          src={user ? user.imageUrl : ''}
          onClick={handleClickRightMenu}
          aria-controls={openProfile ? 'account-menu' : undefined}
          aria-haspopup="true"
          aria-expanded={openProfile ? 'true' : undefined}
        />
      </NavBox>
      <Menu
        anchorEl={anchorElRightMenu}
        id="account-menu"
        open={openProfile}
        onClose={handleCloseRightMenu}
        onClick={handleCloseRightMenu}
        PaperProps={{
          elevation: 0,
          // backgroundColor: '111111',

          sx: {
            overflow: 'visible',
            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',
            mt: 1.5,
            // border: 'solid',
            backgroundColor: colorPaper,
            '& .MuiAvatar-root': {
              width: 32,
              height: 32,
              ml: -0.5,
              mr: 1,
            },
            '&:before': {
              content: '""',
              display: 'block',
              position: 'absolute',
              top: 0,
              right: 14,
              width: 10,
              height: 10,
              transform: 'translateY(-50%) rotate(45deg)',
              zIndex: 0,
            },
          },
        }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <NavLink
          to="/app/profile/"
          style={{ textDecoration: 'none', color: 'inherit' }}
        >
          <MenuItem>
            <Avatar src={user ? user.imageUrl : ''} /> Profile
          </MenuItem>
        </NavLink>
        <NavLink
          to="/app/friends/"
          style={{ textDecoration: 'none', color: 'inherit' }}
        >
          <MenuItem>
            <ListItemIcon>
              <GroupIcon fontSize="small" />
            </ListItemIcon>
            Friends
          </MenuItem>
        </NavLink>
        <Divider sx={{ width: '80%', ml: '10px' }} />
        <NavLink
          to="/team"
          style={{ textDecoration: 'none', color: 'inherit' }}
        >
          <MenuItem>
            <ListItemIcon>
              <GroupIcon fontSize="small" />
            </ListItemIcon>
            About
          </MenuItem>
        </NavLink>
        <MenuItem>
          <ModeNightIcon />
          <Switch
            size="small"
            checked={checked}
            onChange={handleChange}
            inputProps={{ 'aria-label': 'controlled' }}
          />
        </MenuItem>
        <MenuItem onClick={signOut}>
          <ListItemIcon>
            <Logout fontSize="small" />
          </ListItemIcon>
          Logout
        </MenuItem>
      </Menu>
      <Menu
        id="basic-menu"
        // anchorEl={anchorElLeftMenu}
        anchorReference="anchorPosition"
        anchorPosition={{ left: 0, top: 70 }}
        open={open}
        onClose={handleCloseLeftMenu}
        MenuListProps={{
          'aria-labelledby': 'basic-button',
        }}
        PaperProps={{ sx: { backgroundColor: colorPaper } }}
      >
        <NavLink
          to="/app/"
          style={{ textDecoration: 'none', color: 'inherit' }}
        >
          <MenuItem onClick={handleCloseLeftMenu}>Home</MenuItem>
        </NavLink>
        <NavLink
          to="/app/chat"
          style={{ textDecoration: 'none', color: 'inherit' }}
        >
          <MenuItem onClick={handleCloseLeftMenu}>Chat</MenuItem>
        </NavLink>
        <NavLink
          to="/app/game"
          style={{ textDecoration: 'none', color: 'inherit' }}
        >
          <MenuItem onClick={handleCloseLeftMenu}>Game</MenuItem>
        </NavLink>
        <NavLink
          to="/app/live/"
          style={{ textDecoration: 'none', color: 'inherit' }}
        >
          <MenuItem onClick={handleCloseLeftMenu}>Live</MenuItem>
        </NavLink>
        <MenuItem
          onClick={() => {
            setShowMenu(true);
          }}
          // style={{ width: 200 }}
        >
          Notifications
          <Badge
            badgeContent={unreadCount}
            color={'error'}
            style={{ marginLeft: 40, marginRight: 10 }}
          ></Badge>
        </MenuItem>
      </Menu>
      <NotificationMenu
        // anchorEl={null as unknown as HTMLButtonElement}
        notifications={notifications}
        onClose={() => setShowMenu(false)}
        open={showMenu}
        onRead={onSingleNotifRead}
      />
    </>
  );
};

export default NavLoggedIn;
