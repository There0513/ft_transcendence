import {
  Badge,
  IconButton,
  Menu,
  MenuItem,
  Popover,
  MenuList,
} from '@mui/material';
import { Notifications } from '@mui/icons-material';

import { FC, useCallback, useEffect, useRef, useState } from 'react';
import { NotificationDTO } from '../tools/api.autogenerated';
import NotificationMenu from './notifications/NotificationMenu';
import { useQuery } from 'react-query';
import { myApi } from '../tools/apiHandler';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { io } from 'socket.io-client';
import { isNotificationReadOnSeen } from './NavLoggedIn';

// export type Notification = NotificationDTO;
export type NotificationsButtonProps = {
  notifications: (NotificationDTO & {
    content: any;
  })[];
  unreadCount: number;
  onSingleNotifRead: (notifId: number) => void;
  updateNotif: any;
};

// const socket = io('localhost:5000/notifications', {
//   withCredentials: true,
//   autoConnect: false,
// });

// export const isNotificationReadOnSeen = (notif: NotificationDTO) => {
//   const readOnSeen: NotificationDTO['type'][] = [
//     'friend_request_accepted',
//     'new_achievement',
//   ];
//   return readOnSeen.includes(notif.type);
// };

const NotificationsButton: FC<NotificationsButtonProps> = (props) => {
  const [showMenu, setShowMenu] = useState(false);
  const [toMarkReadOnClose, setToMarkReadOnClose] = useState<number[]>([]);

  useEffect(() => {
    if (showMenu) {
      const instantReadNotifications = props.notifications
        .filter((notif) => isNotificationReadOnSeen(notif))
        .map((notif) => notif.id);
      setToMarkReadOnClose((curr) => [...curr, ...instantReadNotifications]);
    } else {
      if (toMarkReadOnClose.length) {
        myApi.notificationsControllerMarkRead({ ids: toMarkReadOnClose });
        toMarkReadOnClose.forEach((notifId) =>
          props.updateNotif(notifId, { isRead: true }),
        );
      }
    }
  }, [showMenu]);
  const buttonRef = useRef(null);
  return (
    <div>
      <IconButton
        sx={{ display: { xs: 'none', sm: 'block' }, mr: 1 }}
        onClick={() => setShowMenu(true)}
        ref={buttonRef}
      >
        <Badge badgeContent={props.unreadCount} color="error">
          <Notifications sx={{ color: 'primary.contrastText' }} />
        </Badge>
      </IconButton>
      <NotificationMenu
        // anchorEl={buttonRef.current!}
        notifications={props.notifications}
        onClose={() => setShowMenu(false)}
        open={showMenu}
        onRead={props.onSingleNotifRead}
      />
    </div>
  );
};

export default NotificationsButton;
