import {
  Avatar,
  Box,
  Stack,
  Typography,
  Grid,
  ButtonGroup,
  Button,
  Menu,
  MenuItem,
  IconButton,
  Divider,
  Chip,
} from '@mui/material';
import SportsCricketIcon from '@mui/icons-material/SportsCricket';
import CircleIcon from '@mui/icons-material/Circle';
import { Link, useNavigate } from 'react-router-dom';
import MenuIcon from '@mui/icons-material/Menu';
import { useState } from 'react';
import { myApi } from '../tools/apiHandler';
import { FriendData } from '../tools/api.autogenerated';

type Person = FriendData & {
  status: ('friend' | 'online' | 'inGame')[];
};

const PersonOnline = (props: { person: Person; isLast: boolean }) => {
  const { person, isLast } = props;
  // const color = person.friend ? '#FFFFCC' : 'inherit';

  const navigate = useNavigate();
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };

  const onChat = async () => {
    const response = await myApi.chatControllerGetPrivateRoom({
      user: person.username,
    });
    navigate(`/app/chat?id=${response.data}`);
  };

  const icon = () => {
    if (person.status.includes('inGame'))
      return <SportsCricketIcon sx={{ color: 'brown', width: 20, ml: 1 }} />;
    if (person.status.includes('online'))
      return <CircleIcon sx={{ color: 'green', width: 10, ml: 1 }} />;
    return <CircleIcon sx={{ color: 'red', width: 10, ml: 1 }} />;
  };

  return (
    <>
      <Grid container columns={8} alignItems="center">
        <Grid item xs={2}>
          <Box flex={5} display="inline-flex" alignItems="center">
            <Link
              to={'users/' + person.username}
              style={{
                textDecoration: 'none',
                color: 'inherit',
                display: 'flex',
                alignItems: 'center',
              }}
            >
              <Avatar
                sx={{ width: 35, height: 35, m: 1 }}
                src={person.imageUrl}
              ></Avatar>
              <Typography>{person.username}</Typography>
            </Link>
            {icon()}
            {person.status.includes('friend') && (
              <Chip
                label="Friend"
                variant="outlined"
                size="small"
                style={{ marginInline: 10 }}
              />
            )}
          </Box>
        </Grid>
        <Grid item xs={3} justifyContent="center">
          <ButtonGroup
            variant="outlined"
            size="small"
            sx={{
              display: { xs: 'none', sm: 'block' },
            }}
          >
            {/* {person.isBlocked ? (
              <Button>unblock</Button>
            ) : (
              <>
                {person.friend ? (
                  <Button sx={{ width: '100px' }}>remove</Button>
                ) : (
                  <Button sx={{ width: '100px' }}>add friend</Button>
                )}
                <Button>block</Button>
              </>
            )} */}
          </ButtonGroup>
        </Grid>

        <Grid item xs={3}>
          <Stack direction="row" spacing={1} justifyContent="right" mr={1}>
            <IconButton
              aria-controls={open ? 'basic-menu' : undefined}
              aria-haspopup="true"
              aria-expanded={open ? 'true' : undefined}
              onClick={handleClick}
            >
              <MenuIcon
                color="secondary"
                sx={{
                  whiteSpace: 'nowrap',
                  display: { xs: 'block', sm: 'none' },
                }}
              />
            </IconButton>
            <Button
              variant="outlined"
              size="small"
              sx={{
                whiteSpace: 'nowrap',
                display: { xs: 'none', sm: 'block' },
              }}
              onClick={() => {
                navigate(`/app/game?invite=${person.username}`);
              }}
            >
              Let's Play!
            </Button>
            <Button
              variant="outlined"
              size="small"
              onClick={onChat}
              sx={{
                whiteSpace: 'nowrap',
                display: { xs: 'none', sm: 'block' },
              }}
            >
              Let's Chat!
            </Button>{' '}
          </Stack>
        </Grid>
      </Grid>
      <Menu
        id="basic-menu"
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        MenuListProps={{
          'aria-labelledby': 'basic-button',
        }}
      >
        <div>
          {person.status.includes('friend') ? (
            <MenuItem onClick={handleClose}>Remove</MenuItem>
          ) : (
            <MenuItem onClick={handleClose}>Add Friend</MenuItem>
          )}
          <MenuItem onClick={handleClose}>Block</MenuItem>
          <MenuItem onClick={handleClose}>Let's play!</MenuItem>
          <MenuItem onClick={handleClose}>Let's chat!</MenuItem>
        </div>
      </Menu>
      {!isLast && <Divider />}
    </>
  );
};

export default PersonOnline;
