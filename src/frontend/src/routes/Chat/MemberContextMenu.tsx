import { Menu, MenuItem } from '@mui/material';
import { useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { chatContext } from './Layout';
import NestedMenuItem from 'material-ui-nested-menu-item-v5/src';
import { myApi } from '../../tools/apiHandler';
import { MuteRequestDTO } from '../../tools/api.autogenerated';

export type MemberContextMenuProps = {
  pos: { x: number; y: number };
  otherUsername: string;
  username: string;
  onClose: () => void;
  role: 'owner' | 'admin' | 'member';
  roomType: 'private' | 'public' | 'protected';
};

export type ContextMenuData = {
  pos: {
    x: number;
    y: number;
  };
  otherUsername: string;
};

const MemberContextMenu = (props: MemberContextMenuProps) => {
  const { roomId, roomData } = useContext(chatContext);
  const navigate = useNavigate();

  const hasRightsToMute = (memberUsername: string) => {
    if (props.roomType === 'private') return false;
    if (props.username === memberUsername) return false; // cannot mute self
    if (props.role === 'member') return false; // cannot mute if we are a regular member
    if (props.role === 'owner') return true; // can always mute if we are the owner
    if (props.role === 'admin') {
      return getMember(memberUsername)?.role === 'member'; // can only mute members if we are an admin
    }
  };

  const hasRightsToBan = (memberUsername: string) => {
    if (props.roomType === 'private') return false;
    if (props.username === memberUsername) return false; // cannot mute self
    if (props.role === 'member') return false; // cannot mute if we are a regular member
    if (props.role === 'owner') return true; // can always mute if we are the owner
    if (props.role === 'admin') {
      if (
        roomData?.banned.find(
          (user) => (user as any).username === memberUsername,
        ) !== undefined
      )
        return true;
      return getMember(memberUsername)?.role === 'member'; // can only mute members if we are an admin
    }
  };

  const hasRightToMakeAdmin = (memberUsername: string) => {
    if (props.roomType === 'private') return false;
    if (props.username === memberUsername) return false; // cannot change self
    if (props.role !== 'owner') return false; // cannot change role if we are not the owner
    return true;
  };

  const getMember = (username: string) => {
    return roomData?.users.find((user) => user.username === username);
  };

  const isMember = (username: string) => {
    return getMember(username) !== undefined;
  };

  const isBanned = (username: string) => {
    return (
      roomData?.banned.find((user) => (user as any).username === username) !==
      undefined
    );
  };

  const onBan = async (target: string) => {
    const member = getMember(target);
    if (!member) return;
    const response = await myApi.chatControllerBan({
      userId: member.id,
      roomId: roomId!,
    });
    props.onClose();
  };

  const onUnban = async (target: string) => {
    const member = roomData?.banned.find(
      (user) => (user as any).username === target,
    );
    if (!member) return;
    const response = await myApi.chatControllerUnban({
      userId: (member as any).id,
      roomId: roomId!,
    });
    props.onClose();
  };

  const onMute = async (target: string, duration: MuteRequestDTO['time']) => {
    const member = getMember(target);
    if (!member) return;
    const response = await myApi.chatControllerMute({
      userId: member.id,
      roomId: roomId!,
      time: duration,
    });
    props.onClose();
  };

  const onUnmute = async (target: string) => {
    const member = getMember(target);
    if (!member) return;
    const response = await myApi.chatControllerUnmute({
      userId: member.id,
      roomId: roomId!,
    });
    props.onClose();
  };

  const onMakeAdmin = async (target: string) => {
    const member = getMember(target);
    if (!member) return;
    const response = await myApi.chatControllerUpdateRole({
      userId: member.id,
      roomId: roomId!,
      role: 'admin',
    });
    props.onClose();
  };

  const onMakeMember = async (target: string) => {
    const member = getMember(target);
    if (!member) return;
    const response = await myApi.chatControllerUpdateRole({
      userId: member.id,
      roomId: roomId!,
      role: 'member',
    });
    props.onClose();
  };

  return (
    <Menu
      open={true}
      onClose={props.onClose}
      anchorReference="anchorPosition"
      anchorPosition={{ top: props.pos.y, left: props.pos.x }}
    >
      <MenuItem onClick={() => navigate(`/app/users/${props.otherUsername}`)}>
        See profile
      </MenuItem>
      <MenuItem onClick={() => navigate(`/app/game?invite=${props.otherUsername}`)}>Play!</MenuItem>
      {isMember(props.otherUsername) &&
        hasRightToMakeAdmin(props.otherUsername) && (
          <MenuItem
            onClick={
              getMember(props.otherUsername)?.role === 'admin'
                ? () => onMakeMember(props.otherUsername)
                : () => onMakeAdmin(props.otherUsername)
            }
          >
            {getMember(props.otherUsername)?.role === 'admin'
              ? 'Make member'
              : 'Make admin'}
          </MenuItem>
        )}
      {isMember(props.otherUsername) && hasRightsToBan(props.otherUsername) && (
        <MenuItem onClick={() => onBan(props.otherUsername)}>Ban</MenuItem>
      )}
      {isBanned(props.otherUsername) && hasRightsToBan(props.otherUsername) && (
        <MenuItem onClick={() => onUnban(props.otherUsername)}>Unban</MenuItem>
      )}
      {isMember(props.otherUsername) &&
        hasRightsToMute(props.otherUsername) &&
        (getMember(props.otherUsername)?.muted ? (
          <MenuItem
            onClick={() => onUnmute(props.otherUsername)}
            disabled={!hasRightsToMute(props.otherUsername)}
          >
            Unmute
          </MenuItem>
        ) : (
          <NestedMenuItem
            parentMenuOpen={true}
            label="Mute"
            disabled={!hasRightsToMute(props.otherUsername)}
          >
            <MenuItem
              onClick={() => onMute(props.otherUsername, '30s')}
              disabled={!hasRightsToMute(props.otherUsername)}
            >
              30s
            </MenuItem>

            <MenuItem
              onClick={() => onMute(props.otherUsername, '5m')}
              disabled={!hasRightsToMute(props.otherUsername)}
            >
              5min
            </MenuItem>

            <MenuItem
              onClick={() => onMute(props.otherUsername, '1h')}
              disabled={!hasRightsToMute(props.otherUsername)}
            >
              1h
            </MenuItem>
          </NestedMenuItem>
        ))}
    </Menu>
  );
};

export default MemberContextMenu;
