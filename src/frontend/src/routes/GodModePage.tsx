import React, { useEffect, useState } from 'react';
import { useQuery } from 'react-query';
import { User } from '../tools/api.autogenerated';
import { myApi } from '../tools/apiHandler';
import { useAuth } from '../tools/auth';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import {
  DataGrid,
  GridColDef,
  GridEditRowProps,
  GridEditRowsModel,
  GridValueGetterParams,
} from '@mui/x-data-grid';
import {
  Button,
  FormControl,
  FormHelperText,
  Input,
  InputLabel,
  TextField,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

const GodModePage = () => {
  const [users, setUsers] = useState<User[]>([]);

  const [newUsername, setNewUsername] = useState('');
  const [newLogin, setNewLogin] = useState('');
  const [newImageUrl, setNewImageUrl] = useState('');
  const [newEmail, setNewEmail] = useState('');

  const { signIn, setAuthState } = useAuth();

  const { isLoading, error, data, refetch } = useQuery(
    'users',
    () => myApi.usersControllerListAll(),
    {
      refetchOnWindowFocus: false,
      refetchOnMount: false,
      refetchOnReconnect: false,
    },
  );

  const navigate = useNavigate();

  // const p: GridEditRowProps = {}
  const editRowModel: GridEditRowsModel = {
    '1': { id: { value: '12' } },
  };

  const columns: GridColDef[] = [
    { field: 'id', headerName: 'ID', width: 70 },
    { field: 'username', headerName: 'Username', width: 130 },
    { field: 'login', headerName: 'Login', width: 130 },
    { field: 'email', headerName: 'Email', width: 230 },
    { field: 'intraId', headerName: 'Intra ID', width: 130 },
    { field: 'isInitialized', headerName: 'Is Initialized', width: 130 },
    { field: 'imageUrl', headerName: 'Image URL', width: 130 },
    { field: 'isTwoFactorAuthEnabled', headerName: '2FA enabled', width: 130 },
  ];

  useEffect(() => {
    if (!data) return;
    setUsers(data?.data);
  }, [data]);

  const createUser = async () => {
    await myApi.auth42ControllerCreateFakeUser({
      login: newLogin,
      email: newEmail,
      displayname: 'i',
      first_name: 'i',
      id: 0,
      image_url: 'f',
      last_name: 'f',
      url: 'l',
      usual_full_name: 'l',
    });
    refetch();
  };

  const loginAs = async (data: any) => {
    await myApi.auth42ControllerLoginFakeUser({
      email: data.row.email,
      login: data.row.login,
    });
    const response = await myApi.twoFactorAuthControllerGetStatus();
    if ((response.data as any).status === 'Uninitialized') {
      setAuthState('UNINITIALIZED');
      navigate('/new-user', { state: { state: 'UNINITIALIZED' } });
    } else {
      myApi.usersControllerGetProfile().then((data) => {
        signIn(data.data);
      });
    }
  };

  return (
    <>
      <div style={{ display: 'flex' }}>
        <div style={{ height: '500px', width: '70%' }}>
          <DataGrid
            rows={users}
            columns={columns}
            pageSize={5}
            rowsPerPageOptions={[5]}
            onRowDoubleClick={loginAs}
          />
        </div>
        <div
          style={{
            display: 'flex',
            flexDirection: 'column',
            flex: 1,
            paddingInline: '30px',
            alignItems: 'center',
          }}
        >
          {/* <TextField
            id="outlined-basic"
            label="username"
            variant="outlined"
            style={{ width: 220 }}
            value={newUsername}
            onChange={(e) => setNewUsername(e.target.value)}
          /> */}
          <TextField
            id="outlined-basic"
            label="login"
            variant="outlined"
            style={{ width: 220 }}
            value={newLogin}
            onChange={(e) => setNewLogin(e.target.value)}
          />
          {/* <TextField id="outlined-basic" label="imageUrl" variant="outlined" style={{ width: 220 }} value={newImageUrl} onChange={(e) => setNewImageUrl(e.target.value)} /> */}
          <TextField
            id="outlined-basic"
            label="email"
            variant="outlined"
            style={{ width: 220 }}
            value={newEmail}
            onChange={(e) => setNewEmail(e.target.value)}
          />
          <Button variant="outlined" onClick={createUser}>
            Create
          </Button>
        </div>
      </div>
    </>
  );
};

export default GodModePage;
