import axios, { AxiosError } from 'axios';
import { Api } from './api.autogenerated';
import { toast } from 'react-toastify';

const autogeneratedApi = new Api();
export const myApi = autogeneratedApi.api;
export const apiAxiosInstance = autogeneratedApi.instance;

apiAxiosInstance.interceptors.response.use(
  function (response) {
    return response;
  },
  function (error) {
    if (isAxiosError(error)) {
      if (error.config && (error.config as any).toastError) {
        if (error.response?.data && (error.response.data as any).message) {
          toast((error.response?.data as any).message, {
            type: 'error',
            autoClose: 5000,
            containerId: 'error-toast',
          });
        }
      }
    }
    return Promise.reject(error);
  },
);

/**
 * A custom type guard function that determines whether
 * `value` is an Error.
 */
export const isError = (value: unknown): value is Error => {
  return value instanceof Error;
};

/**
 * A custom type guard function that determines whether
 * `value` is an AxiosError.
 */
export const isAxiosError = (value: unknown): value is AxiosError => {
  return value instanceof AxiosError;
};
