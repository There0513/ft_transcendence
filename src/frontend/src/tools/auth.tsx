import axios from 'axios';
import React, {
  Dispatch,
  FunctionComponent,
  SetStateAction,
  useEffect,
} from 'react';
import { Navigate, Outlet, useLocation, useNavigate } from 'react-router-dom';
import { useLocalStorage, useSessionStorage } from 'usehooks-ts';
import { UserGetProfileResponseDTO } from '../tools/api.autogenerated';

export interface IAuthContext {
  signIn: (userData: any) => void;
  signOut: () => void;
  triggerLogin: () => void;
  user: User | null;
  setUser: Dispatch<SetStateAction<UserGetProfileResponseDTO | null>>;
  isAuthenticated: () => boolean;
  isBlocked: () => boolean;
  is2FAPending: () => boolean;
  isUninitialized: () => boolean;
  setAuthState: (state: AuthState) => void;
  authState: AuthState;
}

const defaultAuthContext: IAuthContext = {
  signIn: () => {},
  signOut: () => {},
  triggerLogin: () => {},
  user: null,
  setUser: () => {},
  isAuthenticated: () => false,
  isBlocked: () => false,
  isUninitialized: () => false,
  is2FAPending: () => false,
  setAuthState: () => {},
  authState: null,
};

export type User = UserGetProfileResponseDTO & {};

export type AuthState =
  | 'AUTHENTICATED'
  | 'UNINITIALIZED'
  | 'BLOCKED'
  | 'TFA_PENDING'
  | null;

export const AuthContext =
  React.createContext<IAuthContext>(defaultAuthContext);

export interface AuthProviderProps {
  children?: React.ReactNode;
}

export const AuthProvider: FunctionComponent<AuthProviderProps> = ({
  children,
}) => {
  const [user, setUser] = useSessionStorage<User | null>('user', null);
  const [authState, setAuthState] = useSessionStorage<AuthState>(
    'authState',
    null,
  );
  const [fromLocation, setFromLocation] = useLocalStorage<string | null>(
    'LTfromLocation',
    null,
  );
  const location = useLocation();
  const navigate = useNavigate();

  const triggerLogin = () => {
    setAuthState(null);
    setFromLocation(location.pathname + location.search);
    navigate('/login', { state: { state: null } });
  };

  const signIn = (userData: User) => {
    setUser(userData);
    setAuthState('AUTHENTICATED');
    const origin = fromLocation || '/app';
    navigate(origin, { state: { state: 'AUTHENTICATED' } });
  };

  const signOut = async () => {
    await axios.get('/api/auth/42/sign-out');
    setAuthState(null);
    navigate('/');
  };

  const isAuthenticated = () => {
    if (location.state) return location.state.state === 'AUTHENTICATED';
    return authState === 'AUTHENTICATED';
  };

  const isBlocked = () => {
    if (location.state) return location.state.state === 'BLOCKED';
    return authState === 'BLOCKED';
  };

  const isUninitialized = () => {
    if (location.state) return location.state.state === 'UNINITIALIZED';
    return authState === 'UNINITIALIZED';
  };

  const is2FAPending = () => {
    return authState === 'TFA_PENDING';
  };

  const authContext: IAuthContext = {
    signIn,
    signOut,
    triggerLogin,
    user: user,
    setUser: setUser,
    isAuthenticated,
    isBlocked,
    is2FAPending,
    isUninitialized,
    setAuthState,
    authState,
  };

  return (
    <AuthContext.Provider value={authContext}>{children}</AuthContext.Provider>
  );
};

export const useAuth = () => React.useContext(AuthContext);

export const ProtectedRoute = () => {
  const { isAuthenticated, is2FAPending, isUninitialized, authState } =
    useAuth();
  const [fromLocation, setFromLocation] = useLocalStorage<string | null>(
    'LTfromLocation',
    null,
  );
  const location = useLocation();

  useEffect(() => {
    if (!isAuthenticated() && !is2FAPending())
      setFromLocation(location.pathname + location.search);
  }, [authState]);

  if (isUninitialized()) return <Navigate to="/new-user" />;
  if (
    isAuthenticated() ||
    (location.state && location.state.state === 'AUTHENTICATED')
  )
    return <Outlet />;
  else if (is2FAPending()) return <Navigate to="/authenticate" />;
  else return <Navigate to="/login" />;
};
